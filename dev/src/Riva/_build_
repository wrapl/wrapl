GC_VERSION = "7.4.4"
ATOMIC_OPS_VERSION = "7.4.4"
local GC_DIR = file("gc-" .. GC_VERSION)
local ATOMIC_OPS_DIR = GC_DIR/"libatomic_ops"

CFG_OPTS = {
	"--enable-redirect-malloc",
	"--enable-shared=false",
	"--enable-static=true",
	"--enable-threads=posix",
	"--enable-parallel-mark",
	"--disable-gcj-support",
	"--prefix=/tmp",
	"--includedir=" .. file(""),
	"--libdir=" .. file("")
}

CFLAGS = extend(CFLAGS, "-m32", "-DGC_THREADS", "-DTHREAD_LOCAL_ALLOC", "-DUSE_COMPILER_TLS", "-O2")
LDFLAGS = extend(LDFLAGS, "-m32", "-pthread", "-ldl", "-lconfuse", "-lz", "-Wl,-E")

file("libgc.a"){GC_DIR, ATOMIC_OPS_DIR}:build(function()
	execute{"cd", GC_DIR, "&&",
		"./configure", CFG_OPTS, "CFLAGS=\"" .. stringify(CFLAGS) .. "\""
	}
	execute{"cd", GC_DIR, "&&",
		"make"
	}
	execute{"cd", GC_DIR, "&&",
		"make install"
	}
end)

GC_DIR:build(function()
	execute("wget -nv http://hboehm.info/gc/gc_source/gc-" .. GC_VERSION .. ".tar.gz -O- | tar xvzP")
end)

ATOMIC_OPS_DIR{GC_DIR}:build(function()
	execute{"mkdir", "-p", ATOMIC_OPS_DIR}
	execute{"cd", ATOMIC_OPS_DIR, "&&",
		"wget -nv http://www.ivmaisoft.com/_bin/atomic_ops/libatomic_ops-" .. ATOMIC_OPS_VERSION .. ".tar.gz -O- | tar xvzP --strip-components=1"
	}
end)

local Files = {
	file("config.o"),
	file("debug.o"),
	file("directory.o"),
	file("fileset.o"),
	file("libriva.o"),
	file("log.o"),
	file("log2.o"),
	file("main.o"),
	file("memory.o"),
	file("module.o"),
	file("native.o"),
	file("path.o"),
	file("riva.o"),
	file("stringtable.o"),
	file("symbol.o"),
	file("dynamic.o"),
	file("relocate.o"),
	file("exception.o"),
	file("util.o")
}

c_program(RIVA, Files, {file("libgc.a")})

--[[RIVA_SRC = $(SRC_DIR)Riva/
RIVA_OBJ = $(OBJ_DIR)Riva/

LARGE = 1

if $(equal $(SYSNAME), Linux)
	CFG_OPTS = \
		--enable-redirect-malloc \
		--enable-shared=false \
		--enable-static=true \
		--enable-threads=posix \
		--enable-parallel-mark \
		--disable-gcj-support \
		--prefix=/tmp \
		--includedir=$(absname $(RIVA_OBJ)) \
		--libdir=$(absname $(RIVA_OBJ))
	#CFG_OPTS = --enable-shared=false --enable-static=true --enable-threads=posix --disable-parallel-mark --disable-gcj-support --prefix=/tmp --includedir=$(absname $(RIVA_OBJ)) --libdir=$(absname $(RIVA_OBJ))
	CFLAGS += -m32 -DGC_THREADS -DTHREAD_LOCAL_ALLOC -DUSE_COMPILER_TLS #-DDEBUG_THREADS #-DGC_USE_LD_WRAP
	LDFLAGS += -m32
	export

if $(equal $(SYSNAME), CYGWIN_NT-5.1)
	CFG_OPTS = --enable-shared=true --enable-static=false --enable-threads=posix --enable-parallel-mark --disable-gcj-support --prefix=/tmp --includedir=$(absname $(RIVA_OBJ)) --libdir=$(absname $(RIVA_OBJ))
	export
	
if $(equal $(SYSNAME), Mingw)
	CFG_OPTS = --enable-shared=true --enable-static=false --enable-threads=win32 --enable-parallel-mark --disable-gcj-support --prefix=/tmp --includedir=$(absname $(RIVA_OBJ)) --libdir=$(absname $(RIVA_OBJ))
	export

if $(defined DEBUG)
	CFLAGS += -g
	LDFLAGS += -g
	#CFG_OPTS += --enable-gc-debug
	export

GC_VERSION = 7.4.4
ATOMIC_OPS_VERSION = 7.4.4

libgc.a:
	if $(not $(file-exists $(RIVA_SRC)bdwgc/ChangeLog))
		mkdir(-p $(RIVA_SRC)bdwgc)
		cd($(RIVA_SRC)bdwgc, $(system wget -nv http://hboehm.info/gc/gc_source/gc-$(GC_VERSION).tar.gz -O- | tar xvzP --strip-components=1))
	if $(not $(file-exists $(RIVA_SRC)bdwgc/libatomic_ops/ChangeLog))
		mkdir(-p $(RIVA_SRC)bdwgc/libatomic_ops)
		cd($(RIVA_SRC)bdwgc/libatomic_ops, $(system wget -nv http://www.ivmaisoft.com/_bin/atomic_ops/libatomic_ops-$(ATOMIC_OPS_VERSION).tar.gz -O- | tar xvzP --strip-components=1))
	mkdir(-p $(RIVA_OBJ)bdwgc)
	if $(file-exists $(RIVA_OBJ)bdwgc/Makefile)
		cd($(RIVA_OBJ)bdwgc, $(system make distclean))
		cd($(RIVA_OBJ)bdwgc/libatomic_ops, $(system make distclean))
	cd($(RIVA_OBJ)bdwgc, $(system $(RIVA_SRC)bdwgc/configure $(CFG_OPTS) $(HOST) CFLAGS="$(CFLAGS) -O2"))
	cd($(RIVA_OBJ)bdwgc, $(system make))
	cd($(RIVA_OBJ)bdwgc, $(system make install))

clean:
	rm(-f libgc.a)

if $(defined LARGE)
	ALT_CFG_OPTS = \
		--enable-munmap=1 \
		--enable-large-config \
		--enable-redirect-malloc \
		--enable-shared=false \
		--enable-static=true \
		--enable-threads=posix \
		--disable-gcj-support \
		--enable-parallel-mark \
		--prefix=/tmp \
		--includedir=$(absname $(RIVA_OBJ))/alt \
		--libdir=$(absname $(RIVA_OBJ))/alt
	
	alt/libgc.a: libgc.a libudis86.a
		mkdir(-p $(RIVA_OBJ)bdwgc-alt)
		if $(file-exists $(RIVA_OBJ)bdwgc-alt/Makefile)
			cd($(RIVA_OBJ)bdwgc-alt, $(system make distclean))
			cd($(RIVA_OBJ)bdwgc-alt/libatomic_ops, $(system make distclean))
		cd($(RIVA_OBJ)bdwgc-alt, $(system $(RIVA_SRC)bdwgc/configure $(ALT_CFG_OPTS) $(HOST) CFLAGS="$(CFLAGS) -O2"))
		cd($(RIVA_OBJ)bdwgc-alt, $(system make))
		cd($(RIVA_OBJ)bdwgc-alt, $(system make install))

	clean:
		rm(-f alt/libgc.a)

libudis86.a:
	if $(not $(file-exists $(RIVA_SRC)udis86/README))
		cd($(RIVA_SRC), $(system wget -nv http://downloads.sourceforge.net/sourceforge/udis86/udis86-1.7.tar.gz -O- | tar xvzP))
		cd($(RIVA_SRC), $(system mv udis86-1.7 udis86))
	#if $(file-exists $(RIVA_OBJ)udis/Makefile)
	#	rm(-r $(RIVA_OBJ)udis86)
	mkdir(-p $(RIVA_OBJ)udis86)
	cd($(RIVA_OBJ)udis86, $(system $(RIVA_OBJ)udis86/configure $(HOST) --disable-shared --enable-static --prefix=$(absname $(RIVA_OBJ)) --includedir=$(absname $(RIVA_OBJ)) --libdir=$(absname $(RIVA_OBJ)) CFLAGS="$(CFLAGS) -O2" --without-man-pages))
	cd($(RIVA_OBJ)udis86, $(system make mostlyclean))
	cd($(RIVA_OBJ)udis86, $(system make TARGET_LIBS="static"))
	cd($(RIVA_OBJ)udis86, $(system make install))

%.o: $(file libgc.a) $(file libudis86.a)

if $(equal $(SYSNAME), Darwin)
	libconfuse.a: $(RIVA_SRC)confuse/NEWS
		if $(file-exists $(RIVA_OBJ)confuse/Makefile)
			cd($(RIVA_OBJ)confuse, $(system make distclean))
		cd($(RIVA_OBJ)confuse, $(system $(RIVA_SRC)confuse/configure $(CFG_OPTS) CFLAGS="-pipe -O2 -fomit-frame-pointer -w -fexpensive-optimizations"))
		cd($(RIVA_OBJ)confuse, $(system make))
		cd($(RIVA_OBJ)confuse, $(system make install))
	libriva.o: $(file libconfuse.a)
	export

CFLAGS += -std=gnu99 -D_REENTRANT=1 -I$(RIVA_OBJ)

FILES[] =
	config
	directory
	fileset
	libriva
	log
	log2
	memory
	module
	native
	path
	riva
	stringtable
	symbol
	dynamic
	relocate
	exception
	util
	#wrapper
	#thread

LocalCGeneratedFiles(libc_exports.c)

LIBC_A = /usr/lib/i386-linux-gnu/libc.a

$(file libc_exports.c):
	section
		out = $(fopen libc_exports.c, w)
		foreach(line, $(shella objdump -t $(LIBC_A) | grep " g " | cut -f 2 | cut -d\  -f2- | cut -d\  -f2- | cut -d\  -f2-))
			fprintln($(out), "module_export(Module, \"$(line)\", 0, &$(line));")
		close($(out))

if $(equal $(SYSNAME), CYGWIN_NT-5.1)
	FILES += stpcpy debug
	export

if $(equal $(SYSNAME), Mingw)
	FILES += stpcpy debug
	export

if $(equal $(SYSNAME), Linux)
	FILES += debug
	CFLAGS += -DGC_LINUX_THREADS=1
	export

if $(equal $(SYSNAME), Darwin)
	CFLAGS += -DGC_DARWIN_THREADS=1
	FILES += stpcpy
	export

if $(defined DEBUG)
	CFLAGS += -DGC_DEBUG -g
	LDFLAGS += -g
	export
elseif $(defined ALT_DEBUG)
	CFLAGS += -DALT_DEBUG -g
	LDFLAGS += -g
	export
else
	LDFLAGS += -s
	export

INCLUDES += $(OBJ_DIR)Riva

if $(not $(defined PACKAGE))
	LDFLAGS += $(file libudis86.a)
	CFLAGS += -DUSE_UDIS
	export

if $(equal $(SYSNAME), CYGWIN_NT-5.1)
	LDFLAGS += -lpthread -ldl
	LDFLAGS += /usr/lib/libz.a
	export
else
	LDFLAGS += -lz
	export

if $(equal $(SYSNAME), Darwin)
	LDFLAGS += -lpthread -ldl
	LDFLAGS += $(file libconfuse.a) -lintl
	export

if $(equal $(SYSNAME), CYGWIN_NT-5.1)
	LDFLAGS += -lpthread -ldl
	LDFLAGS += -lconfuse -lintl
	export

if $(equal $(SYSNAME), Mingw)
	LDFLAGS += -lmingw32 -lmingwex -lmingwthrd -liberty
	LDFLAGS += -lconfuse -lintl
	export

if $(equal $(SYSNAME), Linux)
	LDFLAGS += -pthread -ldl
	LDFLAGS += -lconfuse
	#LDFLAGS += -Wl,--exclude-libs,ALL
	#LDFLAGS += -Wl,--dynamic-list=$(file dynamic.lst)
	#LDFLAGS += -Wl,--version-script=$(file version.lst)
	LDFLAGS += -Wl,-E
	#LDFLAGS += -rdynamic #TODO: only export specific symbols to reduce file size / load time
	#LDFLAGS += -Wl,--wrap,dlsym
	#LDFLAGS += \
	#	-Wl,--wrap -Wl,dlopen \
	#	-Wl,--wrap -Wl,pthread_create \
	#	-Wl,--wrap -Wl,pthread_join \
	#	-Wl,--wrap -Wl,pthread_detach \
	#	-Wl,--wrap -Wl,pthread_sigmask \
	#	-Wl,--wrap -Wl,pthread_exit \
	#	-Wl,--wrap -Wl,pthread_cancel
	export

$(OUT_BIN)riva: libgc.a

SharedCLibrary($(OUT_BIN)riva.wrap, wrapper)

if $(equal $(SYSNAME), CYGWIN_NT-5.1)
	section:
		LDFLAGS += $(file libgc.a)
		CProgram($(OUT_BIN)riva, main $(FILES))

if $(equal $(SYSNAME), Mingw)
	section:
		LDFLAGS += $(file libgc.a)
		CProgram($(OUT_BIN)riva, main $(FILES))

if $(equal $(SYSNAME), Linux)
	section:
		LDFLAGS += $(file libgc.a)
		CProgram($(OUT_BIN)riva, main $(FILES))
	#section:
	#	LDFLAGS += $(file libgc.a)
	#	SharedCLibrary(libriva, $(FILES))
	#section:
	#	LDFLAGS += libriva.so -lz
	#	$(OUT_BIN)riva-exec: libriva.so
	#	CProgram($(OUT_BIN)riva-exec, riva-exec)
	#	export

$(OUT_BIN)riva-alt: alt/libgc.a libudis86.a

if $(defined LARGE)
	LDFLAGS += $(file alt/libgc.a)
	CProgram($(OUT_BIN)riva-alt, main $(FILES))
]]--