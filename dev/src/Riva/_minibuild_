GC_VERSION := "7.6.0"
GC_DIR := file('gc-{GC_VERSION}')
GC_LIB := file("libgc.a")

ATOMIC_OPS_VERSION := "7.4.4"
ATOMIC_OPS_DIR := GC_DIR/"libatomic_ops"

CFG_OPTS := {
	"--enable-munmap" is 4,
	"--enable-large-config",
	"--enable-shared" is :false,
	"--enable-static" is :true,
	"--enable-parallel-mark",
	"--disable-gcj-support",
	"--prefix" is "/tmp",
	"--includedir" is file(""),
	"--libdir" is file("")
}

if PLATFORM = "Linux" then
	CFG_OPTS := old + {"--enable-redirect-malloc"}
end

CFLAGS := old + ["-m32", "-DGC_THREADS", "-DTHREAD_LOCAL_ALLOC", "-DUSE_COMPILER_TLS", "-O2", '-I{file("")}']
LDFLAGS := old + ["-m32", "-pthread", "-ldl", "-lconfuse", "-lz", "-Wl,-E"]

GC_LIB[GC_DIR, ATOMIC_OPS_DIR] => fun()
	execute("cd", GC_DIR, "&&",
		"./configure", CFG_OPTS, 'CFLAGS=\"{CFLAGS}\"'
	)
	execute("cd", GC_DIR, "&&", "make")
	execute("cd", GC_DIR, "&&", "make install")
end

GC_DIR => fun()
	execute('wget -nv http://hboehm.info/gc/gc_source/gc-{GC_VERSION}.tar.gz -O- | tar xvzP')
end

ATOMIC_OPS_DIR[GC_DIR] => fun()
	execute("mkdir", "-p", ATOMIC_OPS_DIR)
	execute("cd", ATOMIC_OPS_DIR, "&&",
		'wget -nv http://hboehm.info/gc/gc_source/libatomic_ops-{ATOMIC_OPS_VERSION}.tar.gz -O- | tar xvzP --strip-components=1'
	)
end

RIVA_FILES := [
	file("config.o"),
	file("debug.o"),
	file("directory.o"),
	file("fileset.o"),
	file("libriva.o"),
	file("log.o"),
	file("log2.o"),
	file("main.o"),
	file("memory.o"),
	file("module.o"),
	file("native.o"),
	file("path.o"),
	file("riva.o"),
	file("stringtable.o"),
	file("symbol.o"),
	file("dynamic.o"),
	file("relocate.o"),
	file("exception.o"),
	file("util.o")
]

for File in RIVA_FILES do
	File[GC_LIB]
end

RIVA_CONF := OUT_BIN/"riva.conf"

RIVA_CONF => fun(FileName)
	var File := open(FileName:string, "w")
	File:write(
'library = \{
	/lib,
	/usr/lib,
	/usr/lib/i386-linux-gnu,
	/usr/local/lib,
	{OUT_LIB}
}

parseargs = true

modules = \{
	Wrapl/Loader
}'
		)
	File:close
end

WRAPL_MODULES[RIVA_CONF]

c_program(RIVA, RIVA_FILES, [GC_LIB])

DEFAULT[RIVA_CONF]