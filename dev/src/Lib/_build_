ASFLAGS = extend(ASFLAGS, "-I", DEV_INC/"nasm/")
CFLAGS = extend(CFLAGS, "-I", DEV_INC/"gcc/", "-I", GEN_INC/"gcc/", "-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-fno-pic", "-ftls-model=global-dynamic", "-w")
CXXFLAGS = extend(CXXFLAGS, "-I", DEV_INC/"gcc/", "-I", GEN_INC/"gcc/", "-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-fno-pic", "-ftls-model=global-dynamic", "-w")
LDFLAGS = extend(LDFLAGS, "-DLINUX", "-L", DEV_LIB, "-L", GEN_LIB, "Gcc.rlink", "libc.rlink", "libm.rlib", "-L/usr/lib/i386-linux-gnu/", "-L/usr/lib/")

--CFLAGS = extend(CFLAGS, "-std=gnu99")

function rlink_includes(Source)
	local Files = {}
	local Lines = shell(RLINK, "-M", LDFLAGS, Source, "-v0")
	for File in Lines:gmatch("\t(%S*)\n") do
		table.insert(Files, file(File))
	end
	return Files
end

function riva_module(Name, Objects, Libraries, AutoExport)
	local Module = OUT_LIB/Name % "riva"
	mkdir(Module:dir())
	for I, Object in ipairs(Objects) do
		local SourceC = Object % "c"
		local SourceCpp = Object % "cpp"
		local SourceAsm = Object % "asm"
		local SourceAs = Object % "S"
		if lfs.attributes(tostring(SourceC)) then
			local ScanC = SourceC:scan("INCLUDES", c_includes)
			Object{SourceC, ScanC}:build(c_compile)
		elseif lfs.attributes(tostring(SourceCpp)) then
			local ScanCpp = SourceCpp:scan("INCLUDES", cpp_includes)
			Object{SourceCpp, ScanCpp}:build(cpp_compile)
		elseif lfs.attributes(tostring(SourceAsm)) then
			local ScanAsm = SourceAsm:scan("INCLUDES", asm_includes)
			Object{SourceAsm, ScanAsm}:build(asm_compile)
		elseif lfs.attributes(tostring(SourceAs)) then
			local ScanAs = SourceAs:scan("INCLUDES", as_includes)
			Object{SourceAs, ScanAs}:build(as_compile)
		end
	end
	local Script = file(Module:basename()) % "rlink"
	if not lfs.attributes(tostring(Script)) then
		Script = file(Module:basename()) % "rdef"
	end
	local ScriptIncludes = Script:scan("INCLUDES", rlink_includes)
	if AutoExport then
		local ImportFile = GEN_LIB/Name % "rlink"
		mkdir(ImportFile:dir())
		Module{RLINK, Script, Objects, Libraries, ScriptIncludes}:build(function(Module)
			execute{RLINK, LDFLAGS, "-o", Module, Objects, Libraries, Script, "-v0", "-?", Script % "lst", "-X", ImportFile, "-N", Name}
		end)
		ImportFile{Module}
	else
		Module{RLINK, Script, Objects, Libraries, ScriptIncludes}:build(function(Module)
			execute{RLINK, LDFLAGS, "-o", Module, Objects, Libraries, Script, "-v0", "-?", Script % "lst"}
		end)
	end
	DEFAULT{Module}
	return Module
end

function riva_module_auto(Name, Objects, Libraries)
	return riva_module(Name, Objects, Libraries, true)
end

function wrapl_module(Name)
	local Module = OUT_LIB/Name % "wrapl"
	mkdir(Module:dir())
	local Source = file(Module:basename())
	Module{Source}:build(function(Module)
		execute{"cp", Source, Module}
	end)
	DEFAULT{Module}
	return Module
end

function riva_program(Executable, Objects, Libraries)
	for I, Object in ipairs(Objects) do
		local SourceC = Object % "c"
		local SourceAsm = Object % "asm"
		local SourceAs = Object % "S"
		if lfs.attributes(tostring(SourceC)) then
			local ScanC = SourceC:scan("INCLUDES", c_includes)
			Object{SourceC, ScanC}:build(c_compile)
		elseif lfs.attributes(tostring(SourceAsm)) then
			local ScanAsm = SourceAsm:scan("INCLUDES", asm_includes)
			Object{SourceAsm, ScanAsm}:build(asm_compile)
		elseif lfs.attributes(tostring(SourceAs)) then
			local ScanAs = SourceAs:scan("INCLUDES", as_includes)
			Object{SourceAs, ScanAs}:build(as_compile)
		end
	end
	local Script = file(Executable:basename()) % "rlink"
	if not lfs.attributes(tostring(Script)) then
		Script = file(Executable:basename()) % "rdef"
	end
	if not lfs.attributes(tostring(Script)) then
		Script = nil
	end
	Executable{RLINK, Script, Objects, Libraries}:build(function(Executable)
		execute{RLINK, LDFLAGS, "-o", Executable, Objects, Libraries, Script, "-v0", "-?", Executable % "lst"}
	end)
end

function pkg_config(Options)
	local S = shell{"pkg-config", Options}
	return (S:gsub("^%s*(.-)%s*$", "%1"))
end

subdir("Lib")
subdir("Std")
subdir("Sys")
subdir("IO")
subdir("Util")
subdir("Agg")
subdir("Alg")
subdir("Wrapl")
subdir("Web")
subdir("Gir")
subdir("Snd")
subdir("Json")
subdir("Xml")
subdir("Csv")
subdir("DB")
subdir("Math")
subdir("Boost")
subdir("Stat")
--subdir("Tst")
