MOD Preproc;

IMP Sys USE FileSys, Config, Module;
IMP IO USE File, Buffer, Stream;
IMP Wrapl.Loader;
IMP Std USE Function, String, Integer;
IMP Agg USE Table, List;

IMP IO.Terminal USE Out;

DEF InputT <[] rd, strip, line>;

DEF SourceT <[Stream.ReaderT] inputs>;
TO :readi(src@SourceT, n@Integer.SmallT, t@String.T) (
	VAR inputs IS src:inputs, input, line;
	REP (WHILE input <- inputs[1];
		line <- input:line;
		line ~= NIL => (
			input:line <- NIL;
			RET line;
		);
		input:rd:readi(n, t) \ RET $;
		inputs:pop;
	);
	FAIL;
);

DEF T! <- <[]
	buffer
	session
	source
	stack
	escape
	includes
	out
>;

TO :process(t @ T) (
	VAR source IS t:source;
	VAR escape IS t:escape;
	VAR out IS t:out;
	VAR session IS t:session;
	VAR inputs IS source:inputs;
	VAR line, pos;
	REP (WHILE line <- source:readi(0, "\n");
		(pos <- line:find(escape)) => (
			pos > 1 => out:write(line[1, pos]);
			line[pos + 1] = ";" ⇒ (
				out:write("\\");
				inputs[1]:line <- line[pos + 2, 0];
			) // (
				inputs[1]:line <- line[pos + 1, 0];
				session:eval;
				inputs[1]:line <- session:line;
			);
		) // (
			(line ~= "\n") | (inputs[1]:strip ~= :strip) => out:write(line);
		);
	);
);

TO :include(@T, @Stream.ReaderT) IS <t, rd, strip> (
	t:source:inputs:push(InputT(rd, strip));
);

TO :include(@T, @String.T) IS <t, filename, strip> (
	Out:write('including <{filename}> -> ');
	VAR path <- ((t:includes:values + filename) \ FileSys.Exists($)) | SEND 'Error: file "{filename}" not found.\n';
	Out:write('<{path}>\n');
	VAR file <- File.Open(path, File.Flag.Read + File.Flag.Text);
	t:include(file, strip);
	file:close;
);

TO :var(t@T, name@String.T, var+) t:session:var(name, var);
TO :def(t@T, name@String.T, val) t:session:def(name, val); 

DEF New!(out, includes, default_strip) (
	VAR t <- T();
	t:includes <- includes;
	t:out <- out;
	t:escape <- "\\";
	VAR stack <- t:stack <- [out];
	VAR source <- t:source <- SourceT([]);
	VAR session <- t:session <- Loader.SessionNew(source);
	VAR outv IS t:out;
	(NIL == default_strip) <- :false;

	session:var("out", outv);
	session:def("stack", stack);
	session:def("push", <b> stack:push(outv <- (NIL ≢ b) | Buffer.New()));
	session:def("pop", <> stack:pop \ (outv <- stack[1]));
	session:def("begin", :?);
	session:def("end", :?);
	session:def("buffer", Buffer.New);
	session:def("include", <filename, strip> t:include(filename, NIL ~== (strip | default_strip)));
	session:def("_include_", <filename> t:include(filename, :strip));
	session:def("write", <text> outv:write(text));
	session:var("escape", t:escape);
	session:def("do", <text> (
		VAR buffer <- Buffer.New();
		buffer:write(text);
		t:include(buffer, default_strip);
	));

	RET t;
);

END Preproc.
