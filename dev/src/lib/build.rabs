ASFLAGS := old + ["-I", DEV_INC/"nasm/"]
CFLAGS := old + ["-I", DEV_INC/"gcc/", "-I", GEN_INC/"gcc/", '-I{EXT_DIR / "include"}', "-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-fno-pic", "-ftls-model=global-dynamic", "-w"]
CXXFLAGS := old + ["-I", DEV_INC/"gcc/", "-I", GEN_INC/"gcc/", '-I{EXT_DIR / "include"}', "-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-fno-pic", "-ftls-model=global-dynamic", "-w"]
LDFLAGS := old + ["-Z", "-DLINUX", "-L", DEV_LIB, "-L", GEN_LIB, '-L{EXT_DIR / "lib"}', "libc.rlink", "libm.rlib", "-L/usr/lib/"]
PREBUILDS := []
RDOCFLAGS := []

if OS = "debian" then
	GCC_VERSION := shell("gcc -dumpversion"):trim
	LDFLAGS := old + [
		"-L/usr/lib/i386-linux-gnu/",
		'-L/usr/lib/gcc/i686-linux-gnu/{GCC_VERSION}/'
	]
end

rlink_includes := fun(Target) do
	var Files := []
	var Lines := shell(RLINK, "-M", LDFLAGS, Target:source, "-v0")
	for Line in Lines / "\n" do
		if Line[1] = "\t" then
			Files:put(file(Line[2, 0]))
		end
	end
	return Files
end

riva_module := fun(Name, Objects, Libraries, AutoExport) do
	Libraries := Libraries or []
	var Module := OUT_LIB/Name % "riva"
	var Doc := GEN_DOC/Name % "xml"
	Module:dir:mkdir
	Doc:dir:mkdir
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES", :true)[PREBUILDS, Libraries] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	var Script := (file(Module:basename) % "rlink"):exists or (file(Module:basename) % "rdef"):exists
	var ScriptIncludes := Script:scan("INCLUDES", :true)[RLINK, PREBUILDS] => rlink_includes
	if AutoExport then
		var ImportFile := GEN_LIB/Name % "rlink"
		ImportFile:dir:mkdir
		Module[RLINK, Script, Objects, Libraries, ScriptIncludes] => fun(Module) do
			execute(RLINK, LDFLAGS, "-o", Module, Objects, Libraries, Script, "-v0", "-?", Script % "lst", "-X", ImportFile, "-N", Name)
		end
		ImportFile[Module]
	else
		Module[RLINK, Script, Objects, Libraries, ScriptIncludes] => fun(Module) do
			execute(RLINK, LDFLAGS, '-L{Script:dirname}', "-o", Module, Objects, Libraries, Script, "-v0", "-?", Script % "lst")
		end
	end
	Doc[RDOC, RIVA, WRAPL_MODULES, Sources] => fun(Doc) do
		execute(RIVA, "-tWrapl", RDOC, "-o", Doc, CFLAGS, ASFLAGS, Name, Sources)
	end
	DEFAULT[Module, Doc]
	return Module
end

riva_module_auto := fun(Name, Objects, Libraries) do
	return riva_module(Name, Objects, Libraries, :true)
end

wrapl_module := fun(Name) do
	var Module := OUT_LIB/Name % "wrapl"
	var Doc := GEN_DOC/Name % "xml"
	Module:dir:mkdir
	var Source := file(Module:basename)
	Module[Source] => fun(Module) do
		Source:copy(Module)
	end
	Doc[RDOC, RIVA, WRAPL_MODULES, Source] => fun(Doc) do
		execute(RIVA, "-tWrapl", RDOC, "-o", Doc, CFLAGS, ASFLAGS, Name, Source)
	end
	DEFAULT[Module, Doc]
	return Module
end

riva_program := fun(Executable, Objects, Libraries) do
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				var Scan := Source:scan("INCLUDES", :true)[PREBUILDS, Libraries] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	var Script := (file(Executable:basename) % "rlink"):exists or (file(Executable:basename) % "rdef"):exists
	var ScriptIncludes := Script and Script:scan("INCLUDES", :true)[RLINK, PREBUILDS, Libraries] => rlink_includes
	Executable[RLINK, Script, Objects, Libraries, ScriptIncludes] => fun(Executable) do
		execute(RLINK, LDFLAGS, "-o", Executable, Objects, Libraries, Script, "-v0", "-?", Executable % "lst")
	end
end

pkg_config := fun(Options) expr(Options) => fun() shell("pkg-config", Options):trim

GCC_RLINK := GEN_LIB / "Gcc.rlink"
GMP_RLINK := GEN_LIB / "Gmp.rlink"

subdir("Lib")

scope("lib";) do
	PREBUILDS := old + [GCC_RLINK, GMP_RLINK]
	subdir("Std")
	subdir("Sys")
	subdir("IO")
	subdir("Util")
	subdir("Agg")
	subdir("Alg")
	subdir("Wrapl")
	subdir("Fmt")
	subdir("Web")
	subdir("Math")
	--subdir("Boost")
	subdir("Stat")
	--subdir("OpenCV")
	subdir("ML")
	subdir("DB")
	subdir("Net")
	
	if PLATFORM = "Linux" then
		subdir("Gir")
		subdir("Snd")
	end
end
