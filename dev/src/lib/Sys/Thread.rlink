include("libpthread.rlib")
include("Riva/System.rlib")
include("Sys/Signal.rlink")
include("librt.so")

if WINDOWS then
	_export = export
	export = function(Name)
		_export("_" .. Name, Name)
	end
	_subexport = subexport
	subexport = function(Module, Internal, External)
		_subexport(Module, "_" .. Internal, External)
	end
end

export("T")
export("New")
export("Self")
export("Errno")
export("Detach")
export("Data")
export("SetSuccess")
export("SetFailure")
export("SetMessage")
export("SetResult")
export("Result")
export("Signal")
export("Block")
export("Unblock")
export("SetMask")
export("Return")
export("Fail")
export("Send")
export("Sleep")
export("USleep")

export("MutexT")
export("MutexNew")
export("MutexLock")
export("MutexWait")
export("MutexTryLock")
export("MutexUnlock")

export("SemaphoreT")
export("SemaphoreNew")
export("SemaphorePost")
export("SemaphoreWait")
export("SemaphoreTryWait")
--export("SemaphoreTimedWait")

export("KeyT")
export("KeyNew")
export("KeyGet")
export("KeySet")

export("CondT")
export("CondNew")
export("CondWait")
export("CondSignal")
export("CondBroadcast")

export("RWLockT")
export("RWLockNew")
export("RWLockRdLock")
export("RWLockWrLock")
export("RWLockUnlock")

export("QueueT")
export("QueueNew")
export("QueuePush")
export("QueuePut")
export("QueuePop")
export("QueueWait")
export("QueuePeek")
export("QueueLength")
export("QueueLock")
export("QueueUnlock")

submodule("MutexType", nil)
subexport("MutexType", "MutexTypeNormal", "Normal")
subexport("MutexType", "MutexTypeErrorCheck", "ErrorCheck")
subexport("MutexType", "MutexTypeRecursive", "Recursive")
subexport("MutexType", "MutexTypeDefault", "Default")

submodule("Mutex")
subexport("Mutex", "MutexT", "T")
subexport("Mutex", "MutexNew", "New")
subexport("Mutex", "MutexLock", "Lock")
subexport("Mutex", "MutexTryLock", "TryLock")
subexport("Mutex", "MutexUnlock", "Unlock")
subexport("Mutex", "MutexType", "Type")

submodule("Semaphore")
subexport("Semaphore", "SemaphoreT", "T")
subexport("Semaphore", "SemaphoreNew", "New")
subexport("Semaphore", "SemaphorePost", "Post")
subexport("Semaphore", "SemaphoreWait", "Wait")
subexport("Semaphore", "SemaphoreTryWait", "TryWait")

submodule("Key")
subexport("Key", "KeyT", "T")
subexport("Key", "KeyNew", "New")
subexport("Key", "KeySet", "Set")
subexport("Key", "KeyGet", "Get")

submodule("Cond")
subexport("Cond", "CondT", "T")
subexport("Cond", "CondNew", "New")
subexport("Cond", "CondWait", "Wait")
subexport("Cond", "CondBroadcast", "Broadcast")
subexport("Cond", "CondSignal", "Signal")

submodule("Queue")
subexport("Queue", "QueueT", "T")
subexport("Queue", "QueueNew", "New")
subexport("Queue", "QueuePush", "Push")
subexport("Queue", "QueuePut", "Put")
subexport("Queue", "QueuePop", "Pop")
subexport("Queue", "QueueWait", "Wait")
subexport("Queue", "QueuePeek", "Peek")
subexport("Queue", "QueueLength", "Length")
subexport("Queue", "QueueLock", "Lock")
subexport("Queue", "QueueUnlock", "Unlock")

submodule("RWLock")
subexport("RWLock", "RWLockT", "T")
subexport("RWLock", "RWLockNew", "New")
subexport("RWLock", "RWLockRdLock", "RdLock")
subexport("RWLock", "RWLockWrLock", "WrLock")
subexport("RWLock", "RWLockUnlock", "Unlock")

submodule("Gate")
subexport("Gate", "GateT", "T")
subexport("Gate", "GateNew", "New")
subexport("Gate", "GateWait", "Wait")
subexport("Gate", "GateResume", "Resume")

