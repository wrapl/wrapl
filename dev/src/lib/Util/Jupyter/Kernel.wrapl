MOD Kernel;

IMP IO.Terminal USE Out;
IMP Std, Sys, Agg, Util, Json, Alg, IO, Wrapl;

DEF Image! :?;

METH Image(x) '{x}';

VAR Log <- Util.Logger.New(Kernel);

Log.INFO('Starting wrapl kernel');

DEF InT <[IO.Stream.TextReaderT, IO.Stream.ReaderT, IO.Stream.T] parent>;
DEF OutT <[IO.Stream.TextWriterT, IO.Stream.WriterT, IO.Stream.T] type, parent>;

VAR connection <- Json.LoadFile(Sys.Program.Args[1]);
VAR key <- connection.key;

Log.INFO('Connection info = ', connection);
VAR heartbeat <- Util.ZeroMQ.Sock.RepNew('{connection.transport}://{connection.ip}:{connection.hb_port}');
VAR shell <- Util.ZeroMQ.Sock.RouterNew('{connection.transport}://{connection.ip}:{connection.shell_port}');
VAR control <- Util.ZeroMQ.Sock.RouterNew('{connection.transport}://{connection.ip}:{connection.control_port}');
VAR stdin <- Util.ZeroMQ.Sock.RouterNew('{connection.transport}://{connection.ip}:{connection.stdin_port}');
VAR iopub <- Util.ZeroMQ.Sock.PubNew('{connection.transport}://{connection.ip}:{connection.iopub_port}');

METH :write(stream @ OutT, text @ Std.String.T) (
	Send(iopub, NIL, "stream", stream:parent, {}, {"name" IS stream:type, "text" IS text});
);

VAR execution_count <- 0;
VAR input <- IO.Buffer.New();
VAR wrapl <- Wrapl.Session.New(input);
VAR session <- '{Alg.UUID.New()}';
VAR loop <- Util.ZeroMQ.Loop.New();
VAR in, out, err;

wrapl:def("Image", Image);

loop:reader(heartbeat;) (
	VAR msg <- heartbeat:recv(Std.String.T);
	Log.DEBUG('Received {msg} on heartbeat');
);

loop:reader(shell;) (
	VAR ids <- [];
	REP WHILE ids:put("<IDS|MSG>" ~= shell:recv(Std.String.T));
	VAR req_signature <- shell:recv(Std.String.T);
	VAR req_header <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_parent <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_metadata <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_content <- Json.LoadString(shell:recv(Std.String.T));
	Log.DEBUG('Received\n\t{ids}#{ids:length}\n\t{req_signature}\n\t{req_header}\n\t{req_parent}\n\t{req_metadata}\n\t{req_content}\non shell');
	Log.DEBUG('msg_type = {req_header.msg_type | "?"}\n');
	WHEN req_header.msg_type IS "kernel_info_request" DO (
		Send(shell, ids, "kernel_info_reply", req_header, {}, {
			"status" IS "ok",
			"protocol_version" IS "5.2.0",
			"implementation" IS "wrapl",
			"implementation_version" IS "0.0.1",
			"language_info" IS {
				"name" IS "wrapl",
				"version" IS "0.0.0",
				"mimetype" IS "text/x-wrapl",
				"file_extension" IS ".wrapl"
			},
			"banner" IS "Wrapl in Jupyter :)"
		});
		Terminal:export("Out", out <- OutT("stdout", {}));
		Terminal:export("Err", err <- OutT("stderr", {}));
	) IS "execute_request" DO (
		execution_count <- $ + 1;
		input:write(req_content.code);
		Send(iopub, NIL, "status", req_header, {}, {"execution_state" IS "busy"});
		out:parent <- req_header;
		VAR status <- "ok";
		REP (WHILE input:length > 0;
			VAR result <- wrapl:eval;
			VAR display <- Image(result) RECV msg DO "<value>";
			Send(iopub, NIL, "execute_result", req_header, {}, {
				"execution_count" IS execution_count,
				"data" IS {
					"text/plain" IS display
				}
			});
			RECV msg DO (
				status <- "error";
				Send(iopub, NIL, "execute_result", req_header, {}, {
					"execution_count" IS execution_count,
					"data" IS {
						"text/plain" IS '{msg}' RECV msg2 DO "Unknown error"
					}
				});
			);
		);
		Send(shell, ids, "execute_reply", req_header, {}, {
			"status" IS status,
			"execution_count" IS execution_count
		});
		Send(iopub, NIL, "status", req_header, {}, {"execution_state" IS "idle"});
	);
);

loop:reader(control;) (
	VAR ids <- [];
	REP WHILE ids:put("<IDS|MSG>" ~= shell:recv(Std.String.T));
	VAR req_signature <- shell:recv(Std.String.T);
	VAR req_header <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_parent <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_metadata <- Json.LoadString(shell:recv(Std.String.T));
	VAR req_content <- Json.LoadString(shell:recv(Std.String.T));
	Log.DEBUG('Received\n\t{ids}#{ids:length}\n\t{req_signature}\n\t{req_header}\n\t{req_parent}\n\t{req_metadata}\n\t{req_content}\non control');
);

loop:reader(stdin;) (
	VAR msg <- stdin:recv(Std.String.T);
	Log.DEBUG('Received {msg} on stdin');
);

loop:start;

DEF Send(socket, ids, msg_type, parent, metadata, content, extra*) (
	VAR msg_id <- '{Alg.UUID.New()}';
	VAR header <- Json.EncodeString({
		"msg_id" IS msg_id,
		"username" IS "kernel",
		"session" IS session,
		"msg_type" IS msg_type,
		"version" IS "5.2",
		"date" IS '{Sys.Time.Now()}':before("+"):map(" ", "T") + 'Z'
	});
	parent <- Json.EncodeString(parent);
	metadata <- Json.EncodeString(metadata);
	content <- Json.EncodeString(content);
	VAR hmac <- Alg.HMAC.SHA256.New(key);
	hmac:update(header);
	hmac:update(parent);
	hmac:update(metadata);
	hmac:update(content);
	VAR signature <- Util.Base16.Encode(hmac:digest):lower;
	Log.DEBUG('send\n\t{ids}\n\t{signature}\n\t{header}\n\t{parent}\n\t{metadata}\n\t{content}\n');
	ids ~== NIL => EVERY socket:sendm(ids:values);
	socket:sendm("<IDS|MSG>");
	socket:sendm(signature);
	socket:sendm(header);
	socket:sendm(parent);
	socket:sendm(metadata);
	socket:sendm(content);
	EVERY socket:sendm(extra:values);
	socket:send("");
	RET msg_id;
);

END Kernel.