|.arch x86
|.section code, data
|.type VALUE, Std$Object$t
|.type TYPE, Std$Type$t
|.type SMALLINT, Std$Integer$smallt
|.type BIGINT, Std$Integer$bigt
|.type REAL, Std$Real$t

typedef void (*encode_argument_func)(struct dasm_state *Dynasm, int Index, GIArgInfo *Arg);
typedef void (*check_argument_func)(struct )

typedef struct {
	void (*encode_argument)(struct dasm_state *, int, GIArgInfo *);
	void (*encode_return)(struct dasm_state *, int, GIArgInfo *);
} type_tag_t;

static void boolean_encode_argument(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| xor eax, eax
	| cmp [edi + 8 * Index], dword Std$Symbol$false
	| je >1
	| cmp [edi + 8 * Index], dword Std$Symbol$true
	| jne &incorrect_argument[Index]
	| inc eax
	| 1:
	| push eax
};

static void boolean_encode_return(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| mov ecx, dword Std$Symbol$false
	| test eax, eax
	| cmovnz ecx, dword Std$Symbol$true
	| xor edx, edx
};


static void integer_encode_argument(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| push dword Std$Integer$SmallT
	| push dword VALUE:ecx->Type
	| call &Std$Type$is
	| lea esp, [esp + 8]
	| jne &incorrect_argument[Index]
	| push dword [SMALLINT:ecx->Value]
};

static void integer_encode_return(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| push eax
	| call &Std$Integer$alloc_small
	| pop [SMALLINT:eax->Value]
	| mov ecx, eax
	| xor edx, edx
};

static void real_encode_argument(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| push dword Std$Real$T
	| push dword VALUE:ecx->Type
	| call &Std$Type$is
	| lea esp, [esp + 8]
	| jne &incorrect_argument[Index]
	| fld qword [REAL:ecx->Value]
	| sub esp, byte 8
	| fstp qword [esp]
};

static void real_encode_return(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| call &Std$Real$alloc
	| fstp [REAL:eax->Value]
	| mov ecx, eax
	| xor edx, edx
};

static void string_encode_argument(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	| push dword Std$String$T
	| push dword VALUE:ecx->Type
	| call &Std$Type$is
	| lea esp, [esp + 8]
	| jne &incorrect_argument[Index]
	| push ecx
	| call Std$String$flatten
	| mov [esp], eax
};

static void string_encode_return(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	
};

static void array_encode_argument(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
};

static void array_encode_return(struct dynasm_state *Dynasm, int Index, GIArgInfo *Arg) {
};

void encode_argument(struct dasm_state *Dynasm, int Index, GIArgInfo *Arg) {
	GITypeInfo Type[0];
	g_arg_info_load_type(Arg, Type);
	// esi = #args
	// edi = args
	// This code needs to put edi[8 * Index] onto the stack
	switch (g_type_info_get_tag(Type)) {
	case GI_TYPE_TAG_VOID:
	case GI_TYPE_TAG_GTYPE:
		break;
	case GI_TYPE_TAG_UTF8:
	case GI_TYPE_TAG_FILENAME:
		break;
	case GI_TYPE_TAG_ARRAY:
		break;
	case GI_TYPE_TAG_INTERFACE:
		break;
	case GI_TYPE_TAG_GLIST:
		break;
	case GI_TYPE_TAG_GSLIST:
		break;
	case GI_TYPE_TAG_GHASH:
		break;
	case GI_TYPE_TAG_ERROR:
		break;
	case GI_TYPE_TAG_UNICHAR:
		break;
	};
};

void encode_function(struct dasm_State *Dynasm, GIFunctionInfo *Function) {
	|.code
	| push ebp
	| mov ebp, esp
	
	int NumArgs = g_callable_info_get_n_args((GICallableInfo *)Function);
	for (int I = 0; I < NumArgs; ++I) {
		GIArgInfo Arg[0];
		g_callable_info_load_arg((GICallableInfo *)Function, I, Arg);
		
	};
	
	| mov esp, ebp
	| pop ebp
	| ret
};

