MOD API;

IMP IO.Terminal USE Out;

IMP IO USE Stream, Process, File, Socket;
IMP Sys USE FileSys, Config, Program;
IMP Std.String USE Upper, Lower;
IMP Fmt.Html.Gumbo;

VAR ns!, cname!, name!;

DEF identifiers! <- {};

DEF AddIdent!(name, path) (
	identifiers:insert(name, path);
);

DEF FixupHtml(node) (
	WHEN node:tag IS :a DO (
		VAR child <- node:children:values IN Gumbo.Node.ElementT | RET node;
		WHEN child:tag IS :code DO (
			WHEN child.class IS "function" DO (
				VAR id <- identifiers[child:text:before(" ()")];
				id ~== NIL => (
					VAR prefix <- 'Gir/{ns}/{name}/';
					id:begins(prefix) => id <- id[prefix:length + 1, 0];
					node:content <- [id];
					node:tag <- :id;
					node:attrs <- {};
				);
			) IS "literal" DO (
				VAR id <- identifiers[child:text];
				id ~== NIL => (
					VAR prefix <- 'Gir/{ns}/{name}/';
					id:begins(prefix) => id <- id[prefix:length + 1, 0];
					node:content <- [id];
					node:tag <- :id;
					node:attrs <- {};
				);
			);
		);
	);
);

DEF FixupXml(node) (
	--Out:write('node = {node}\n');
	WHEN node:tag IS :a DO (
		VAR child <- node[];
		child ~== NIL => (
			WHEN child:tag IS :code DO (
				WHEN child.class IS "function" DO (
					VAR id <- identifiers[child:text:before(" ()")];
					id ~== NIL => (
						VAR prefix <- 'Gir/{ns}/{name}/';
						id:begins(prefix) => id <- id[prefix:length + 1, 0];
						node:content <- [id];
						node:tag <- :id;
						node:attrs <- {};
					);
				) IS "literal" DO (
					VAR id <- identifiers[child:text];
					id ~== NIL => (
						VAR prefix <- 'Gir/{ns}/{name}/';
						id:begins(prefix) => id <- id[prefix:length + 1, 0];
						node:content <- [id];
						node:tag <- :id;
						node:attrs <- {};
					);
				);
			) IS :span DO (
				WHEN child.class IS "type" DO (
					VAR id <- identifiers[child:text];
					id ~== NIL => (
						VAR prefix <- 'Gir/{ns}/{name}/';
						id:begins(prefix) => id <- id[prefix:length + 1, 0];
						node:content <- [id];
						node:tag <- :id;
						node:attrs <- {};
					);
				);
			);
		);
	) IS :em DO (
		WHEN node.class IS "parameter" DO (
			VAR child <- node;
			REP WHILE child <- child[];
			node:tag <- :var;
			node:content <- [child:text];
			node:attrs <- {};
		);
	) IS :span DO (
		WHEN node.class IS "term" DO (
			VAR child <- FixupXml(node[]);
			child == NIL => (
				node.class <- "literal";
			) // (
				node:tag <- child:tag;
				node:content <- child:content;
				node:attrs <- {};
			);
		);
	) IS :td DO (
		node[:p] => node:content <-  node[:p]:content;
		EVERY FixupXml(node[]);
	) IS :code DO (
		WHEN node.class IS "literal" DO (
			VAR id <- identifiers[node:text];
			id ~== NIL => (
				VAR prefix <- 'Gir/{ns}/{name}/';
				id:begins(prefix) => id <- id[prefix:length + 1, 0];
				node:content <- [id];
				node:tag <- :id;
				node:attrs <- {};
			) // (
				node:tag <- :span;
			);
		); 
	) DO (
		EVERY FixupXml(node[]);
	);
	RET node;
	RECV msg DO (
		Out:write('msg = {msg}\n');
		Out:write('node = {node}\n');
		Program.Exit(1);
	);
);

DEF GetHtml!(filename) (
	FileSys.Exists(filename) // FAIL;
	VAR file <- File.Open(filename, File.Flag.Read + File.Flag.Text);
	VAR html <- Gumbo.Parse(file:rest);
	file:close;
	RET html:root;
);

DEF GetFunc!(function) (
	Config.Get("DOCS") // FAIL;
	FileSys.Exists('docs/{ns}') // FileSys.MakeDir('docs/{ns}', 511);
	VAR filename <- 'docs/{ns}/{cname}-{function}.txt';
	FileSys.Exists(filename) // (
		VAR dir, source, node, html;
		ns = "Xml" => (
			dir <- "/usr/share/doc/libxml2-doc/html";
			html <- GetHtml('{dir}/libxml-{cname:lower}.html') | FAIL;
			VAR search <- 'Function: {function}';
			--node <- doc:find(<node> node:tag == :h3 & node:find(<node> node:text:find(search)));
			--VAR siblings <- node:parent:children;
			--node <- siblings[siblings:find(node):to(siblings:length)] IN Xml.NodeT;
			--args <- ["sgrep", '(("<h3>" .. "</pre>") containing "</a>Function: {function}" __ "</div>")'];
		) // ns = "Extra" => (
			dir <- API:path + "Extra/gtk+extra/docs/reference/html";
			html <- GetHtml('{dir}/gtkextra-{cname:lower}.html') | FAIL;
			--node <- doc:find(<node> node:tag == :h3 & node:text:begins(function));
			--VAR siblings <- node:parent:children;
			--node <- siblings[siblings:find(node):to(siblings:length)] IN Xml.NodeT;
			--args <- ["sgrep", '(("<h3>" .. "</div>") containing "<h3>{function} ()</h3>") extracting ("<h3>{function} ()</h3>" .. "</pre>")'];
		) // (
			ns = "Conf" => ns <- "GConf";
			dir <- "/usr/share/gtk-doc/html/" + ns:map(Upper, Lower);
			FileSys.Exists(dir) // dir <- "/usr/share/gtk-doc/html/lib" + ns:map(Upper, Lower);
			FileSys.Exists(dir) // FAIL;
			html <- GetHtml('{dir}/{cname}.html') | FAIL;
			
			
			--node <- doc:find(<node> node:tag == :h3 & node:text:begins(function));
			--VAR siblings <- node:parent:children;
			--node <- siblings[siblings:find(node):to(siblings:length)] IN Xml.NodeT;
			--args <- ["sgrep", '(("<h3>" .. "</div>") containing "<h3>{function} ()</h3>") extracting ("<h3>{function} ()</h3>" .. "</pre>")'];
		);
		-=FileSys.Exists(source) => (
			args:put(source);
		) // (
			EVERY args:put(dir + "/" + ("." ~= (".." ~= FileSys.ListDir(dir))));
		);=-		
		File.Open(filename, File.Flag.Write + File.Flag.Text):write(node):close;	
	);
	RET filename;
);

DEF GetType!() (
	Config.Get("DOCS") // FAIL;
	FileSys.Exists('docs/{ns}') // FileSys.MakeDir('docs/{ns}', 511);
	VAR filename <- 'docs/{ns}/{cname}.txt'; 
	FileSys.Exists(filename) // (
		VAR dir <- "/usr/share/gtk-doc/html/" + ns:map(Upper, Lower);
		FileSys.Exists(dir) // dir <- "/usr/share/gtk-doc/html/lib" + ns:map(Upper, Lower);
		FileSys.Exists(dir) // FAIL;
		VAR source <- '{dir}/{cname}.html';
		VAR doc <- GetHtml(source);
		VAR node <- doc:find(<node> node:tag == :h2 & node:text:begins("Description"));
		VAR siblings <- node:parent:children;
		VAR i <- siblings:find(node) + 1;
		VAR j <- i:to(siblings:length) \ siblings[j]:tag == :h2;
		VAR nodes <- siblings[i, j];
		--VAR args <- ["sgrep", '"<h2>Description</h2>" __ "<h2>Details</h2>"'];
		FileSys.Exists(source) // FAIL;
		VAR file <- File.Open(filename, File.Flag.Write + File.Flag.Text);
		EVERY file:write(nodes:values);
		file:close;		
	);
	RET filename;
);

END API.
