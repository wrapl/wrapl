MOD Cbor;

IMP IO.Terminal USE Out;
IMP Std USE Number, String, Symbol, Address, Real;
IMP Agg USE List, Table;
IMP IO.File, IO.Stream, IO.Buffer, IO.Escaped;
IMP Sys.Time, Sys.Module;
IMP Alg.UUID;
IMP Num.Array;

DEF Decoder Cbor.Decoder;
DEF Encoder Cbor.Encoder;

DEF TagT <[] tag, value>;

METH String.Of(value @ TagT) '{value:tag}({value:value})';

METH :write(encoder @ Encoder.T, value @ TagT) (
	encoder:write_tag(value:tag);
	encoder:write(value:value);
);

METH :write(encoder @ Encoder.T, value @ Time.T) (
	encoder:write_tag(0);
	encoder:write(String.Of(value, "%FT%T%Z"));
);

METH :write(encoder @ Encoder.T, value @ UUID.T) (
	encoder:write_tag(37);
	encoder:write(Address.Of(value), 16);
);

DEF Tag! TagT;

DEF Tags! {
	0 IS <stack, value> Time.New(value, "%FT%T%Z"),
	1 IS <stack, value> Time.New(Number.Of(value)),
	2 IS <stack, value> (
		VAR result <- 0, i;
		EVERY i <- 0:to(value:length - 1) DO result <- result:sal(8) + value:get8(i);
		RET result;
	),
	3 IS <stack, value> (
		VAR result <- 0, i;
		EVERY i <- 0:to(value:length - 1) DO result <- result:sal(8) + value:get8(i);
		RET ~result;
	),
	37 IS <stack, value> UUID.New(value)
};

DEF Loader! MOD
	DEF New!(flags | 0) (
		VAR parser <- Decoder.New();
		parser:userdata <- [];
		parser:onfinal <- <userdata+, value> userdata <- value;
		parser:onmapstart <- <stack> stack:push({});
		parser:onmappair <- <stack, key, value> stack[1]:insert(key, value);
		parser:onmapend <- <stack> stack:pop;
		parser:onarraystart <- <stack> stack:push([]);
		parser:onarrayvalue <- <stack, value> stack[1]:put(value);
		parser:onarrayend <- <stack> stack:pop;
		parser:ontag <- <stack, tag> (Tags[tag] | <stack, value> TagT(tag, value));
		RET parser;
	);
END;

DEF Decode! :?;

METH Decode(@Stream.ReaderT) IS <stream, flags> (
	VAR loader <- Loader.New(flags);
	stream:copy(loader);
	RET loader:userdata;
);

METH Decode(@String.T) IS <string, flags> (
	VAR loader <- Loader.New(flags);
	loader:parse(string);
	RET loader:userdata;
);

METH Decode(@Address.SizedT) IS <address, flags> (
	VAR parser <- Loader.New(flags);
	parser:parse(address, address:length);
	RET parser:userdata;
);

DEF LoadFile!(filename, flags) (
	VAR file <- File.Open(filename, File.Flag.Read);
	VAR parser <- Loader.New(flags);
	file:copy(parser);
	file:close;
	RET parser:userdata;
);

DEF LoadString!(string, flags) (
	VAR parser <- Loader.New(flags);
	parser:parse(string);
	RET parser:userdata;
);

DEF Encode!(stream, value) Encoder.New(stream):write(value);

DEF EncodeBuffer!(value) (
	VAR buffer <- Buffer.New();
	Encoder.New(buffer):write(value);
	VAR flat <- Address.SizedNew(buffer:length);
	buffer:read(flat, flat:length);
	RET flat;
);

DEF EncodeString!(value) (
	VAR buffer <- Buffer.New();
	Encoder.New(buffer):write(value);
	RET buffer:rest;
);

END Cbor.