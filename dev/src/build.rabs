RLINK := DEV_BIN/"rlink"
RDOC := DEV_BIN/"rdoc"
WRAPL_MODULES := meta("WraplModules")

EXT_DIR := file("ext"):mkdir
(EXT_DIR / "lib"):mkdir
(EXT_DIR / "include"):mkdir
(EXT_DIR / "share"):mkdir
(EXT_DIR / "man"):mkdir

CFLAGS := ["-pipe", "-O3", "-fomit-frame-pointer", "-D_GNU_SOURCE", "-fexpensive-optimizations"]
CXXFLAGS := ["-pipe", "-O3", "-fomit-frame-pointer", "-D_GNU_SOURCE", "-fexpensive-optimizations"]
ASFLAGS := ["-DCMOVSUPPORT", "-Ov", "-w-all"]
GOFLAGS := []
LDFLAGS := []
LIBCFLAGS := ["-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-ftls-model=global-dynamic", "-w", "-O2"]
LIBCXXFLAGS := ["-fdata-sections", "-ffunction-sections", "-Wstrict-aliasing", "-ftls-model=global-dynamic", "-w", "-O2"]
LIBLDFLAGS := []
LIBHOST := ""
PREBUILDS := []

if PLATFORM = "Linux" then
	CFLAGS := old + ["-DLINUX"]
	CXXFLAGS := old + ["-DLINUX"]
	ASFLAGS := old + [ASFLAGS, "-DLINUX"]
elseif PLATFORM = "Darwin" then
	CFLAGS := old + ["-DMACOSX"]
	CXXFLAGS := old + ["-DMACOSX"]
	ASFLAGS := old + ["-DMACOSX"]
end

if MACHINE = "i686" then
	CFLAGS := old + ["-DX86", "-fno-pic", "-m32"]
	CXXFLAGS := old + ["-DX86", "-fno-pic", "-m32"]
	ASFLAGS := old + ["-DX86", "-felf32"]
	LDFLAGS := old + ["-m32"]
	LIBCFLAGS := old + ["-fno-pic", "-m32"]
	LIBCXXFLAGS := old + ["-fno-pic", "-m32"]
	LIBLDFLAGS := old + ["-m32"]
	LIBHOST := "i686-linux-gnu"
elseif MACHINE = "x86_64" then
	CFLAGS := old + ["-DX64", "-m64", "-fPIC"]
	CXXFLAGS := old + ["-DX64", "-m64", "-fPIC"]
	ASFLAGS := old + ["-DX64", "-felf64"]
end

c_includes := fun(Target) do
	var Files := []
	var Lines := shell('gcc -c {CFLAGS} -M -MG {Target:source}')
	var Files := Lines:trim:replace(r"\\\n ", "") / r"[^\\]( )"
	Files:pop
	for File in Files do
		File := file(File:replace(r"\\ ", " "))
	end
	return Files
end

c_compile := fun(Object) do
	var Source := Object % "c"
	execute('gcc -c', CFLAGS, '-o', Object, Source)
end

cpp_includes := fun(Target) do
	var Files := []
	var Lines := shell('gcc -c {CXXFLAGS} -M -MG {Target:source}')
	var Files := Lines:trim:replace(r"\\\n ", "") / r"[^\\]( )"
	Files:pop
	for File in Files do
		File := file(File:replace(r"\\ ", " "))
	end
	return Files
end

cpp_compile := fun(Object) do
	var Source := (Object % "cpp"):exists or (Object % "cc")
	execute('gcc -c', CXXFLAGS, '-o', Object, Source)
end

asm_includes := fun(Target) do
	var Files := []
	var Lines := shell("nasm", ASFLAGS, "-M", Target:source)
	var Start, File := ""
	var I := for J in 1 .. Lines:length do
		if Lines[J, J + 2] = ": " then
			exit J + 2
		end
	end
	loop while I <= Lines:length
		var Char := Lines[I]
		if Char <= " " then
			if File != "" then
				Files:put(file(File))
				File := ""
			end
		elseif Char = "\\" then
			I := old + 1
			Char := Lines[I]
			if Char = " " then
				File := '{old} '
			end
		else
			File := '{old}{Char}'
		end
		I := old + 1
	end
	return Files
end

asm_compile := fun(Object) do
	var Source := Object % "asm"
	execute('nasm', ASFLAGS, '-o', Object, Source)
end

as_includes := fun(Target) do
	var Files := []
	var Lines := shell("gcc -c", CFLAGS, "-M", Target:source)
	var Start, File := ""
	var I := for J in 1 .. Lines:length do
		if Lines[J, J + 2] = ": " then
			exit J + 2
		end
	end
	loop while I <= Lines:length
		var Char := Lines[I]
		if Char <= " " then
			if File != "" then
				Files:put(file(File))
				File := ""
			end
		elseif Char = "\\" then
			I := old + 1
			Char := Lines[I]
			if Char = " " then
				File := '{old} '
			end
		else
			File := '{old}{Char}'
		end
		I := old + 1
	end
	return Files
end

as_compile := fun(Object) do
	var Source := Object % "S"
	execute('gcc -c', CFLAGS, '-o', Object, '-I', Source:dirname, Source)
end

SourceTypes := {
	"c" is [c_includes, c_compile],
	"cc" is [cpp_includes, cpp_compile],
	"cpp" is [cpp_includes, cpp_compile],
	"asm" is [asm_includes, asm_compile],
	"S" is [as_includes, as_compile]
}

c_program := fun(Executable, Objects, Libraries) do
	Objects := Objects or []
	Libraries := Libraries or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES")[Libraries, PREBUILDS] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Executable[Objects, Libraries] => fun(Executable) do
		execute('gcc', '-o', Executable, Objects, Libraries, LDFLAGS)
	end
	DEFAULT[Executable]
end

UDIS_LIB := EXT_DIR / "lib/libudis86.a"
GC_LIB := EXT_DIR / "lib/libgc.a"

subdir("rlink")
subdir("riva")
subdir("lib")